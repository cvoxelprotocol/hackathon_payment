/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001736380380620017368339818101604052810190620000379190620001af565b81600390805190602001906200004f9291906200008d565b508060049080519060200190620000689291906200008d565b506012600560006101000a81548160ff021916908360ff160217905550505062000392565b8280546200009b90620002b7565b90600052602060002090601f016020900481019282620000bf57600085556200010b565b82601f10620000da57805160ff19168380011785556200010b565b828001600101855582156200010b579182015b828111156200010a578251825591602001919060010190620000ed565b5b5090506200011a91906200011e565b5090565b5b80821115620001395760008160009055506001016200011f565b5090565b6000620001546200014e846200024b565b62000222565b9050828152602081018484840111156200016d57600080fd5b6200017a84828562000281565b509392505050565b600082601f8301126200019457600080fd5b8151620001a68482602086016200013d565b91505092915050565b60008060408385031215620001c357600080fd5b600083015167ffffffffffffffff811115620001de57600080fd5b620001ec8582860162000182565b925050602083015167ffffffffffffffff8111156200020a57600080fd5b620002188582860162000182565b9150509250929050565b60006200022e62000241565b90506200023c8282620002ed565b919050565b6000604051905090565b600067ffffffffffffffff82111562000269576200026862000352565b5b620002748262000381565b9050602081019050919050565b60005b83811015620002a157808201518184015260208101905062000284565b83811115620002b1576000848401525b50505050565b60006002820490506001821680620002d057607f821691505b60208210811415620002e757620002e662000323565b5b50919050565b620002f88262000381565b810181811067ffffffffffffffff821117156200031a576200031962000352565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61139480620003a26000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f19146101a357806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161029d565b6040516100ce9190610f04565b60405180910390f35b6100f160048036038101906100ec9190610d98565b61032f565b6040516100fe9190610ee9565b60405180910390f35b61010f61034d565b60405161011c9190610fc6565b60405180910390f35b61013f600480360381019061013a9190610d49565b610357565b60405161014c9190610ee9565b60405180910390f35b61015d61040f565b60405161016a9190610fe1565b60405180910390f35b61018d60048036038101906101889190610d98565b610426565b60405161019a9190610ee9565b60405180910390f35b6101bd60048036038101906101b89190610d98565b6104d2565b005b6101d960048036038101906101d49190610ce4565b6104e0565b6040516101e69190610fc6565b60405180910390f35b6101f7610528565b6040516102049190610f04565b60405180910390f35b61022760048036038101906102229190610d98565b6105ba565b6040516102349190610ee9565b60405180910390f35b61025760048036038101906102529190610d98565b610666565b6040516102649190610ee9565b60405180910390f35b61028760048036038101906102829190610d0d565b610684565b6040516102949190610fc6565b60405180910390f35b6060600380546102ac9061112a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d89061112a565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b600061034361033c61070b565b8484610713565b6001905092915050565b6000600254905090565b60006103648484846108de565b6104048461037061070b565b84600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103ba61070b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103ff919061106e565b610713565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006104c861043361070b565b84846001600061044161070b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104c39190611018565b610713565b6001905092915050565b6104dc8282610b40565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105379061112a565b80601f01602080910402602001604051908101604052809291908181526020018280546105639061112a565b80156105b05780601f10610585576101008083540402835291602001916105b0565b820191906000526020600020905b81548152906001019060200180831161059357829003601f168201915b5050505050905090565b600061065c6105c761070b565b8484600160006105d561070b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610657919061106e565b610713565b6001905092915050565b600061067a61067361070b565b84846108de565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90610f86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90610f46565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108d19190610fc6565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561094e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094590610f66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590610f26565b60405180910390fd5b806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a08919061106e565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a949190611018565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b339190610fc6565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba790610fa6565b60405180910390fd5b80600254610bbe9190611018565b600281905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0e9190611018565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610cae9190610fc6565b60405180910390a35050565b600081359050610cc981611330565b92915050565b600081359050610cde81611347565b92915050565b600060208284031215610cf657600080fd5b6000610d0484828501610cba565b91505092915050565b60008060408385031215610d2057600080fd5b6000610d2e85828601610cba565b9250506020610d3f85828601610cba565b9150509250929050565b600080600060608486031215610d5e57600080fd5b6000610d6c86828701610cba565b9350506020610d7d86828701610cba565b9250506040610d8e86828701610ccf565b9150509250925092565b60008060408385031215610dab57600080fd5b6000610db985828601610cba565b9250506020610dca85828601610ccf565b9150509250929050565b610ddd816110b4565b82525050565b6000610dee82610ffc565b610df88185611007565b9350610e088185602086016110f7565b610e11816111ba565b840191505092915050565b6000610e29602383611007565b9150610e34826111cb565b604082019050919050565b6000610e4c602283611007565b9150610e578261121a565b604082019050919050565b6000610e6f602583611007565b9150610e7a82611269565b604082019050919050565b6000610e92602483611007565b9150610e9d826112b8565b604082019050919050565b6000610eb5601f83611007565b9150610ec082611307565b602082019050919050565b610ed4816110e0565b82525050565b610ee3816110ea565b82525050565b6000602082019050610efe6000830184610dd4565b92915050565b60006020820190508181036000830152610f1e8184610de3565b905092915050565b60006020820190508181036000830152610f3f81610e1c565b9050919050565b60006020820190508181036000830152610f5f81610e3f565b9050919050565b60006020820190508181036000830152610f7f81610e62565b9050919050565b60006020820190508181036000830152610f9f81610e85565b9050919050565b60006020820190508181036000830152610fbf81610ea8565b9050919050565b6000602082019050610fdb6000830184610ecb565b92915050565b6000602082019050610ff66000830184610eda565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611023826110e0565b915061102e836110e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110635761106261115c565b5b828201905092915050565b6000611079826110e0565b9150611084836110e0565b9250828210156110975761109661115c565b5b828203905092915050565b60006110ad826110c0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156111155780820151818401526020810190506110fa565b83811115611124576000848401525b50505050565b6000600282049050600182168061114257607f821691505b602082108114156111565761115561118b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b611339816110a2565b811461134457600080fd5b50565b611350816110e0565b811461135b57600080fd5b5056fea26469706673582212203a3b127d7244dccb9ece885bc64466bf95e28069c99271f7d39d1c1bb86caa8b64736f6c63430008040033";

export class TestToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestToken> {
    return super.deploy(name, symbol, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
